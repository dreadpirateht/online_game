9/6/21:
Started programing server and network files, working to send and recieve strings

Todo
1. change strings to arbitrary data types using pickle, and create a transfer protocol using a header first
2. create a data packet object within the network file that will store the data, as well as whether or not it has been read
3. implement a reconnect feature in the network object
4. add tables to be assigned to in the server file


Finished 1 and 2 on list above, started implementing 3 by adding a reconnect, disconnect and soft disconnect method
to the Network class. Also, made a bunch of progress on the server side by refactoring into a class and created a
method to deal with parsing server and table commands.

9/7/21:
Added project to a git repository on github, and cloned repository to laptop as well. First coding task is to make test
files for the server and network for both the laptop and home comp.

Files will be added to a server file in the scripts folder

Started adding the ability for the server and network to send commands to each other so we can reconnect and disconnect
properly

9/10/21:
Finished getting the server to accept server commands, added a disconnect command that properly disconnects a client
going to add a soft disconnect that puts the client on an idle list, and a reconnect that allows them to restablish a
connection with the server.

9/13/21:
Finished with the soft disconnect and reconnect server command handling, need to add an idle timer to the network
class as well as a threaded method to the server class which removes networks from the idle list. Then need to implement
a table class to start games between groups of clients.

9/16/21:
Added a timeout method for idle/soft disconnected network objects to the server so that a reconnect can't be made
after a certain time. Attached to server, and debugged the three server commands Reconnect, Disconnect, SoftDisconnect.

Decided that it makes sense to refactor the Packet class to contain a data type attribute. This way we dont need to do
a bunch of weird parsing of the packet data to see how to handle the packet. Steps should be as follows

1. Add data type to Packet class

2a. Refactor Network.send to take the optional parameter packet_data_type

2. Refactor the handle incoming data method of the server class to deal with changes

3. Refactor the network test file to take the data type as input first then create the packet to send

Finished the refactoring process, and debugged everything.

Still concerned that the network.recv_data list is not clearing properly on the server side, will check.
A few lines of code revealed that the list is not clearing properly, so we need to change things. I changed
the code around, it appears to work correctly, except twice I did not get a packet sent from the client network, but
This was out of 20 tests, and I think it was a glitch from the client not sending not the server not recieving.

Next, I need to add server log and server stop methods and replace the print statements with log calls
Log method is added and seems to be working
stop method was added, but no need to debug now

Next step is to create a Table class as well as a Table_Server class to allow the implementation of placing clients at
tables. The Table Server will simply inherit from server and have additional code to deal with the changes.

